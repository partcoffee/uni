/*------------------------------------*\
    #Variables
\*------------------------------------*/

$padding: 10px; /* Default padding */
$hover-opacity: .9; /* Opacity for hover-effect */


/*------------------------------------*\
    #General
\*------------------------------------*/

.grid, .final-grid {
	width: 100%;

	/* Fixes CSS issues with floats through a pseudo element, makes sure the grid doesn't collapse on itself */
	&:after {
		content: '';
		display: table;
		clear: both;
	}
}

/* Targets any classname containing 'col-' somewhere */
[class*='col-'] {
	float: left;
	padding: ($padding/2);
	line-height: 0;
	position: relative;
}

/* Conditional class for the new homepage */
.final-portfolio {
	padding-top: 2em;
	border-top: 1px solid #d2d2d2;

	/* Size for smaller displays */
	.col-40 {
		width: 100%;

		/* Size for bigger displays, with perfected padding */
		@media (min-width: ($break * 1.5)) {
			width: 40%;
			padding-left: 5%;
			padding-right: 0%;
			float: right;
			padding-top: 0;
		}

		/* Forcing our first paragraph to stick to the very top of the parent container */
		p:first-of-type {
			margin-top: 0;
		}
	}

	/* Shamelessly using !important rules here to force a certain width. This is usually a
		 terrible way of doing things, but as this is limited to a single page it could easily have been inline,
		 styled with a <style> tag or !important rules. I went for !important rules. */

	/* To elaborate on the problem, !important adds a lot of weight to a selector, so if I were to overwrite it at
		 a later point, the rule with !important would still be used. That forces me to use !important again, which could easily
		 snowball into something worse like ID-selectors if I'm not careful. */
	.col-60 {
		width: 100% !important;
		padding-right: 0;
		padding-left: 0;

		@media (min-width: ($break * 1.5)) {
			width: 60% !important;
		}
	}

	/* Specific rules for the top item in the portfolio-grid on the new homepage */
	.col-100 {
		width: 100%;
		padding-right: 0;
		padding-left: 0;

		&:hover, &:focus {
			opacity: $hover-opacity;
		}

		.final &:hover, &:focus {
			opacity: 1;
		}

		&:nth-of-type(1) .project-name {
			color: #fff;
		}

		@media (min-width: ($break * 1.5)) {
			padding: 2px !important;
			margin: 0 !important;
		}
	}

	/* Specific rules for the remaining items in the portfolio-grid on the new homepage */
	.col-50 {
		@include animate(0.2s ease-out);
		padding: ($padding / 2);
		width: 50%;
		line-height: 0;
		font-size: 0;
		transform: translateZ(0);

		&:nth-of-type(2) {
			padding-left: 0;
			padding-top: 0;
		}

		&:nth-of-type(3) {
			padding-right: 0;
			padding-top: 0;
		}

		&:nth-of-type(4) {
			padding-left: 0;
		}

		&:nth-of-type(5) {
			padding-right: 0;
		}

		&:hover, &:focus {
			opacity: $hover-opacity;
		}

		@media (min-width: ($break * 1)) {
			width: 50%;
			margin-bottom: ($padding/2);
			padding: ($padding/2) ($padding/2) 0;
		}

		@media (min-width: ($break * 1.5)) {
			padding: 2px !important;
			margin: 0 !important;
		}
	}

	/* Adjusted project-information for the new homepage, with limited space */
	.project-name {
		bottom: 1em;
		left: 1em;
		padding: .5em;
		font: 400 .7rem/1 $secondary;
		text-transform: uppercase;
		letter-spacing: .1rem;
	}
}

/* Column layout styling */
.col-100 {
	@include animate(0.2s ease-out);
	padding: $padding 0 0;
	width: 100%;
	margin-bottom: $padding;
	line-height: 0;
	font-size: 0;
	transform: translateZ(0);

	/* It's important to define the focus-effect as well for users without a mouse-input.
	   This makes the columns act as if they have been hovered over when the user slects them through a keyboard */
	.portfolio &:hover, a:focus {
		opacity: $hover-opacity;
	}

	&.full-width {
		width: 100%;
		padding-left: 0;
		padding-right: 0;
	}

	@media (min-width: ($break * 1.5)) {
		width: 50%;
		margin-bottom: ($padding/2);
		padding: ($padding/2) ($padding/2) 0;

		&:nth-of-type(odd) {
			padding-left: 0;
		}

		&:nth-of-type(even) {
			padding-right: 0;
		}

		/*&:last-of-type {
			padding-left: 0;
			padding-right: 0;
			width: 100%;
		}*/

/*		&:last-of-type, &:nth-last-of-type(2), &:nth-of-type(1), &:nth-of-type(2) {
			padding-right: 0;
			padding-left: 0;
			width: 100%;
		}*/
	}
}

/* Specific to our homepage â€“ extremely detailed and should be adjusted to the amount of projects, their width and height */
@media (min-width: ($break * 1.5)) {
	.portfolio {
		.col-100 {
			&:nth-of-type(odd) {
				padding-left: ($padding / 2);
			}

			&:nth-of-type(even) {
				padding-right: ($padding / 2);
			}

			&:nth-of-type(1) {
				padding-left: 0;
			}

			&:nth-of-type(2) {
				padding-right: 0;
			}

			&:nth-of-type(3), &:nth-of-type(7) {
				padding-left: 0;
				padding-right: 0;
				width: 100%;

				img {
					width: 100%;
					height: 320px;

					@media (min-width: $total * 1.5) {
						height: 420px;
					}
					/* Setting a absolute height and width is NOT recommended,
					but I know this is a PNG with a solid colour,
					and can therefore stretch it as I please */
				}
			}

			&:nth-of-type(4) {
				padding-left: 0;
			}

			&:nth-of-type(5) {
				padding-right: 0;

				/* Super custom "magic number" values. I do not encourage this at all, but for our specific use-case,
				where we know how everything is going to look, what images we're using, and that we know, for a fact,
				that the image in question is a solid colour, we can let it slide. MUST be changed if we change the image. */
				@media (min-width: 1500px) {
					img {
						height: 394px;
					}
				}
			}

			&:nth-of-type(6) {
				padding-right: 0;
			}
		}
	}
}

/* Project title styling */
.project-name {
	position: absolute;
	color: #fff;
	bottom: $margins;
	left: $margins;
	width: 80%;
	font-size: 18px;
	margin: 0;
	font: 100 18px/1 $primary;

	span {
		display: block;
		font-size: 50%;
		margin-top: .5em;
	}

	@media (min-width: $break) {
		font-size: 22px;
		bottom: ($margins * 1.2);
		left: ($margins * 1.2);
	}

	@media (min-width: ($break * 2)) {
		bottom: ($margins * 1.5);
		left: ($margins * 1.5);
	}

	.col-100:nth-of-type(1) &, .col-100:nth-of-type(2) & {
		color: $highlight-color;
	}
}